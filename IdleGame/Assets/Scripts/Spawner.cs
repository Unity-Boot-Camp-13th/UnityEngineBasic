using System.Collections;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UIElements;

public class Spawner : MonoBehaviour
{
    // 1. 몬스터의 생성은 프레임 당 생성보다는 초 간격으로 생성되는 경우가 많다. (젠 타임)

    // 이 작업을 유니티에서는 코루틴이라는 기법으로 설계합니다.

    // 코루틴이 자주 사용되는 경우
    // 1. 몬스터 생성
    // 2. 물약, 스킬 쿨타임

    public int count;       // 생성될 몬스터의 개수
    public float spawnTime; // 생성 주기 (젠 타임, 스폰 타임..)
    public GameObject[] monster_prefab;
    public GameObject player;


    private void Start()
    {
        StartCoroutine(CSpawn());
        // StartCoroutine(함수명());
    }


    IEnumerator CSpawn()
    {
        // 1. 어디에 생성할 것인가?
        Vector3 pos;
        

        // 2. 몇 번 생성할 것인가?
        for (int i = 0; i < count; i++)
        {
            int index = Random.Range(0, monster_prefab.Length); // 랜덤 선택
            // 3. 어떤 형태로 생성할 것인가?
            pos = player.transform.position + Random.insideUnitSphere * 10.0f;
            // 생성 높이 통일 (y 좌표 = 0)
            pos.y = 0.0f;
            // Quaternion.idetity : 회전 값 0
            // 기존 형태를 그대로 생성하는 경우에 사용하는 값

            // 생성된 거리를 기준으로 재생성 유도
            while (Vector3.Distance(pos, Vector3.zero) <= 3.0f)
            {
                pos = player.transform.position + Random.insideUnitSphere * 10.0f;
                pos.y = 0.0f;
            }

            Instantiate(monster_prefab[index], pos, Quaternion.identity);
        }
        yield return new WaitForSeconds(spawnTime);
        StartCoroutine(CSpawn());
        // yield return : 일정 시점 후 다시 돌아오는 코드
        // WaitForSeconds(float t) : 작성한 값만큼 대기합니다. (초 단위)
    }
}